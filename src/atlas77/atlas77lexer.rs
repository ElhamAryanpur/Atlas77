// Generated from Atlas77.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const COMMA:isize=1; 
	pub const SEMICOLON:isize=2; 
	pub const COLON:isize=3; 
	pub const LPAREN:isize=4; 
	pub const RPAREN:isize=5; 
	pub const LBRACE:isize=6; 
	pub const RBRACE:isize=7; 
	pub const LBRACKET:isize=8; 
	pub const RBRACKET:isize=9; 
	pub const PLUS:isize=10; 
	pub const MINUS:isize=11; 
	pub const MULT:isize=12; 
	pub const DIV:isize=13; 
	pub const MOD:isize=14; 
	pub const EQ:isize=15; 
	pub const NEQ:isize=16; 
	pub const LT:isize=17; 
	pub const GT:isize=18; 
	pub const LTE:isize=19; 
	pub const GTE:isize=20; 
	pub const ARROW:isize=21; 
	pub const NOT:isize=22; 
	pub const OR:isize=23; 
	pub const AND:isize=24; 
	pub const WS:isize=25; 
	pub const NEWLINE:isize=26; 
	pub const TRUE:isize=27; 
	pub const FALSE:isize=28; 
	pub const LET:isize=29; 
	pub const RETURN:isize=30; 
	pub const AS:isize=31; 
	pub const IF:isize=32; 
	pub const ELSE:isize=33; 
	pub const FN:isize=34; 
	pub const I32:isize=35; 
	pub const F32:isize=36; 
	pub const BOOL:isize=37; 
	pub const VOID:isize=38; 
	pub const CHAR:isize=39; 
	pub const IDENTIFIER:isize=40; 
	pub const NUMBER:isize=41; 
	pub const STRING:isize=42;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;1] = [
		"DEFAULT_MODE"
	];

	pub const ruleNames: [&'static str;42] = [
		"COMMA", "SEMICOLON", "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACKET", "RBRACKET", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQ", "NEQ", 
		"LT", "GT", "LTE", "GTE", "ARROW", "NOT", "OR", "AND", "WS", "NEWLINE", 
		"TRUE", "FALSE", "LET", "RETURN", "AS", "IF", "ELSE", "FN", "I32", "F32", 
		"BOOL", "VOID", "CHAR", "IDENTIFIER", "NUMBER", "STRING"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;40] = [
		None, Some("','"), Some("';'"), Some("':'"), Some("'('"), Some("')'"), 
		Some("'{'"), Some("'}'"), Some("'['"), Some("']'"), Some("'+'"), Some("'-'"), 
		Some("'*'"), Some("'/'"), Some("'%'"), Some("'=='"), Some("'!='"), Some("'<'"), 
		Some("'>'"), Some("'<='"), Some("'>='"), Some("'->'"), Some("'!'"), Some("'||'"), 
		Some("'&&'"), None, None, Some("'true'"), Some("'false'"), Some("'let'"), 
		Some("'return'"), Some("'as'"), Some("'if'"), Some("'else'"), Some("'fn'"), 
		Some("'i32'"), Some("'f32'"), Some("'bool'"), Some("'void'"), Some("'char'")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;43]  = [
		None, Some("COMMA"), Some("SEMICOLON"), Some("COLON"), Some("LPAREN"), 
		Some("RPAREN"), Some("LBRACE"), Some("RBRACE"), Some("LBRACKET"), Some("RBRACKET"), 
		Some("PLUS"), Some("MINUS"), Some("MULT"), Some("DIV"), Some("MOD"), Some("EQ"), 
		Some("NEQ"), Some("LT"), Some("GT"), Some("LTE"), Some("GTE"), Some("ARROW"), 
		Some("NOT"), Some("OR"), Some("AND"), Some("WS"), Some("NEWLINE"), Some("TRUE"), 
		Some("FALSE"), Some("LET"), Some("RETURN"), Some("AS"), Some("IF"), Some("ELSE"), 
		Some("FN"), Some("I32"), Some("F32"), Some("BOOL"), Some("VOID"), Some("CHAR"), 
		Some("IDENTIFIER"), Some("NUMBER"), Some("STRING")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;
pub type LocalTokenFactory<'input> = CommonTokenFactory;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

pub struct Atlas77Lexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,Atlas77LexerActions,Input,LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for Atlas77Lexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input:CharStream<From<'input> >> Deref for Atlas77Lexer<'input,Input>{
	type Target = BaseLexer<'input,Atlas77LexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for Atlas77Lexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> Atlas77Lexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "Atlas77Lexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","3");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				Atlas77LexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> Atlas77Lexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		Atlas77Lexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct Atlas77LexerActions {
}

impl Atlas77LexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,Atlas77LexerActions,Input,LocalTokenFactory<'input>>> for Atlas77LexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> Atlas77Lexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,Atlas77LexerActions,Input,LocalTokenFactory<'input>>> for Atlas77LexerActions{
}
impl<'input> TokenAware<'input> for Atlas77LexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for Atlas77Lexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ).into())
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x2c\u{ea}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\
		\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\x24\x09\
		\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\x28\x04\
		\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x03\x02\x03\x02\x03\x03\x03\
		\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\
		\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0b\x03\x0b\x03\x0c\x03\
		\x0c\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\
		\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\
		\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\
		\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1a\x06\x1a\u{90}\
		\x0a\x1a\x0d\x1a\x0e\x1a\u{91}\x03\x1a\x03\x1a\x03\x1b\x05\x1b\u{97}\x0a\
		\x1b\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1d\x03\
		\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1e\x03\x1e\x03\
		\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\
		\x20\x03\x21\x03\x21\x03\x21\x03\x22\x03\x22\x03\x22\x03\x22\x03\x22\x03\
		\x23\x03\x23\x03\x23\x03\x24\x03\x24\x03\x24\x03\x24\x03\x25\x03\x25\x03\
		\x25\x03\x25\x03\x26\x03\x26\x03\x26\x03\x26\x03\x26\x03\x27\x03\x27\x03\
		\x27\x03\x27\x03\x27\x03\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x29\x03\
		\x29\x07\x29\u{d8}\x0a\x29\x0c\x29\x0e\x29\u{db}\x0b\x29\x03\x2a\x06\x2a\
		\u{de}\x0a\x2a\x0d\x2a\x0e\x2a\u{df}\x03\x2b\x03\x2b\x07\x2b\u{e4}\x0a\
		\x2b\x0c\x2b\x0e\x2b\u{e7}\x0b\x2b\x03\x2b\x03\x2b\x03\u{e5}\x02\x2c\x03\
		\x03\x05\x04\x07\x05\x09\x06\x0b\x07\x0d\x08\x0f\x09\x11\x0a\x13\x0b\x15\
		\x0c\x17\x0d\x19\x0e\x1b\x0f\x1d\x10\x1f\x11\x21\x12\x23\x13\x25\x14\x27\
		\x15\x29\x16\x2b\x17\x2d\x18\x2f\x19\x31\x1a\x33\x1b\x35\x1c\x37\x1d\x39\
		\x1e\x3b\x1f\x3d\x20\x3f\x21\x41\x22\x43\x23\x45\x24\x47\x25\x49\x26\x4b\
		\x27\x4d\x28\x4f\x29\x51\x2a\x53\x2b\x55\x2c\x03\x02\x06\x04\x02\x0b\x0b\
		\x22\x22\x05\x02\x43\x5c\x61\x61\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\
		\x63\x7c\x03\x02\x32\x3b\x02\u{ee}\x02\x03\x03\x02\x02\x02\x02\x05\x03\
		\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\x09\x03\x02\x02\x02\x02\x0b\x03\
		\x02\x02\x02\x02\x0d\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\x02\x11\x03\
		\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\
		\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1b\x03\x02\x02\x02\x02\x1d\x03\
		\x02\x02\x02\x02\x1f\x03\x02\x02\x02\x02\x21\x03\x02\x02\x02\x02\x23\x03\
		\x02\x02\x02\x02\x25\x03\x02\x02\x02\x02\x27\x03\x02\x02\x02\x02\x29\x03\
		\x02\x02\x02\x02\x2b\x03\x02\x02\x02\x02\x2d\x03\x02\x02\x02\x02\x2f\x03\
		\x02\x02\x02\x02\x31\x03\x02\x02\x02\x02\x33\x03\x02\x02\x02\x02\x35\x03\
		\x02\x02\x02\x02\x37\x03\x02\x02\x02\x02\x39\x03\x02\x02\x02\x02\x3b\x03\
		\x02\x02\x02\x02\x3d\x03\x02\x02\x02\x02\x3f\x03\x02\x02\x02\x02\x41\x03\
		\x02\x02\x02\x02\x43\x03\x02\x02\x02\x02\x45\x03\x02\x02\x02\x02\x47\x03\
		\x02\x02\x02\x02\x49\x03\x02\x02\x02\x02\x4b\x03\x02\x02\x02\x02\x4d\x03\
		\x02\x02\x02\x02\x4f\x03\x02\x02\x02\x02\x51\x03\x02\x02\x02\x02\x53\x03\
		\x02\x02\x02\x02\x55\x03\x02\x02\x02\x03\x57\x03\x02\x02\x02\x05\x59\x03\
		\x02\x02\x02\x07\x5b\x03\x02\x02\x02\x09\x5d\x03\x02\x02\x02\x0b\x5f\x03\
		\x02\x02\x02\x0d\x61\x03\x02\x02\x02\x0f\x63\x03\x02\x02\x02\x11\x65\x03\
		\x02\x02\x02\x13\x67\x03\x02\x02\x02\x15\x69\x03\x02\x02\x02\x17\x6b\x03\
		\x02\x02\x02\x19\x6d\x03\x02\x02\x02\x1b\x6f\x03\x02\x02\x02\x1d\x71\x03\
		\x02\x02\x02\x1f\x73\x03\x02\x02\x02\x21\x76\x03\x02\x02\x02\x23\x79\x03\
		\x02\x02\x02\x25\x7b\x03\x02\x02\x02\x27\x7d\x03\x02\x02\x02\x29\u{80}\
		\x03\x02\x02\x02\x2b\u{83}\x03\x02\x02\x02\x2d\u{86}\x03\x02\x02\x02\x2f\
		\u{88}\x03\x02\x02\x02\x31\u{8b}\x03\x02\x02\x02\x33\u{8f}\x03\x02\x02\
		\x02\x35\u{96}\x03\x02\x02\x02\x37\u{9a}\x03\x02\x02\x02\x39\u{9f}\x03\
		\x02\x02\x02\x3b\u{a5}\x03\x02\x02\x02\x3d\u{a9}\x03\x02\x02\x02\x3f\u{b0}\
		\x03\x02\x02\x02\x41\u{b3}\x03\x02\x02\x02\x43\u{b6}\x03\x02\x02\x02\x45\
		\u{bb}\x03\x02\x02\x02\x47\u{be}\x03\x02\x02\x02\x49\u{c2}\x03\x02\x02\
		\x02\x4b\u{c6}\x03\x02\x02\x02\x4d\u{cb}\x03\x02\x02\x02\x4f\u{d0}\x03\
		\x02\x02\x02\x51\u{d5}\x03\x02\x02\x02\x53\u{dd}\x03\x02\x02\x02\x55\u{e1}\
		\x03\x02\x02\x02\x57\x58\x07\x2e\x02\x02\x58\x04\x03\x02\x02\x02\x59\x5a\
		\x07\x3d\x02\x02\x5a\x06\x03\x02\x02\x02\x5b\x5c\x07\x3c\x02\x02\x5c\x08\
		\x03\x02\x02\x02\x5d\x5e\x07\x2a\x02\x02\x5e\x0a\x03\x02\x02\x02\x5f\x60\
		\x07\x2b\x02\x02\x60\x0c\x03\x02\x02\x02\x61\x62\x07\x7d\x02\x02\x62\x0e\
		\x03\x02\x02\x02\x63\x64\x07\x7f\x02\x02\x64\x10\x03\x02\x02\x02\x65\x66\
		\x07\x5d\x02\x02\x66\x12\x03\x02\x02\x02\x67\x68\x07\x5f\x02\x02\x68\x14\
		\x03\x02\x02\x02\x69\x6a\x07\x2d\x02\x02\x6a\x16\x03\x02\x02\x02\x6b\x6c\
		\x07\x2f\x02\x02\x6c\x18\x03\x02\x02\x02\x6d\x6e\x07\x2c\x02\x02\x6e\x1a\
		\x03\x02\x02\x02\x6f\x70\x07\x31\x02\x02\x70\x1c\x03\x02\x02\x02\x71\x72\
		\x07\x27\x02\x02\x72\x1e\x03\x02\x02\x02\x73\x74\x07\x3f\x02\x02\x74\x75\
		\x07\x3f\x02\x02\x75\x20\x03\x02\x02\x02\x76\x77\x07\x23\x02\x02\x77\x78\
		\x07\x3f\x02\x02\x78\x22\x03\x02\x02\x02\x79\x7a\x07\x3e\x02\x02\x7a\x24\
		\x03\x02\x02\x02\x7b\x7c\x07\x40\x02\x02\x7c\x26\x03\x02\x02\x02\x7d\x7e\
		\x07\x3e\x02\x02\x7e\x7f\x07\x3f\x02\x02\x7f\x28\x03\x02\x02\x02\u{80}\
		\u{81}\x07\x40\x02\x02\u{81}\u{82}\x07\x3f\x02\x02\u{82}\x2a\x03\x02\x02\
		\x02\u{83}\u{84}\x07\x2f\x02\x02\u{84}\u{85}\x07\x40\x02\x02\u{85}\x2c\
		\x03\x02\x02\x02\u{86}\u{87}\x07\x23\x02\x02\u{87}\x2e\x03\x02\x02\x02\
		\u{88}\u{89}\x07\x7e\x02\x02\u{89}\u{8a}\x07\x7e\x02\x02\u{8a}\x30\x03\
		\x02\x02\x02\u{8b}\u{8c}\x07\x28\x02\x02\u{8c}\u{8d}\x07\x28\x02\x02\u{8d}\
		\x32\x03\x02\x02\x02\u{8e}\u{90}\x09\x02\x02\x02\u{8f}\u{8e}\x03\x02\x02\
		\x02\u{90}\u{91}\x03\x02\x02\x02\u{91}\u{8f}\x03\x02\x02\x02\u{91}\u{92}\
		\x03\x02\x02\x02\u{92}\u{93}\x03\x02\x02\x02\u{93}\u{94}\x08\x1a\x02\x02\
		\u{94}\x34\x03\x02\x02\x02\u{95}\u{97}\x07\x0f\x02\x02\u{96}\u{95}\x03\
		\x02\x02\x02\u{96}\u{97}\x03\x02\x02\x02\u{97}\u{98}\x03\x02\x02\x02\u{98}\
		\u{99}\x07\x0c\x02\x02\u{99}\x36\x03\x02\x02\x02\u{9a}\u{9b}\x07\x76\x02\
		\x02\u{9b}\u{9c}\x07\x74\x02\x02\u{9c}\u{9d}\x07\x77\x02\x02\u{9d}\u{9e}\
		\x07\x67\x02\x02\u{9e}\x38\x03\x02\x02\x02\u{9f}\u{a0}\x07\x68\x02\x02\
		\u{a0}\u{a1}\x07\x63\x02\x02\u{a1}\u{a2}\x07\x6e\x02\x02\u{a2}\u{a3}\x07\
		\x75\x02\x02\u{a3}\u{a4}\x07\x67\x02\x02\u{a4}\x3a\x03\x02\x02\x02\u{a5}\
		\u{a6}\x07\x6e\x02\x02\u{a6}\u{a7}\x07\x67\x02\x02\u{a7}\u{a8}\x07\x76\
		\x02\x02\u{a8}\x3c\x03\x02\x02\x02\u{a9}\u{aa}\x07\x74\x02\x02\u{aa}\u{ab}\
		\x07\x67\x02\x02\u{ab}\u{ac}\x07\x76\x02\x02\u{ac}\u{ad}\x07\x77\x02\x02\
		\u{ad}\u{ae}\x07\x74\x02\x02\u{ae}\u{af}\x07\x70\x02\x02\u{af}\x3e\x03\
		\x02\x02\x02\u{b0}\u{b1}\x07\x63\x02\x02\u{b1}\u{b2}\x07\x75\x02\x02\u{b2}\
		\x40\x03\x02\x02\x02\u{b3}\u{b4}\x07\x6b\x02\x02\u{b4}\u{b5}\x07\x68\x02\
		\x02\u{b5}\x42\x03\x02\x02\x02\u{b6}\u{b7}\x07\x67\x02\x02\u{b7}\u{b8}\
		\x07\x6e\x02\x02\u{b8}\u{b9}\x07\x75\x02\x02\u{b9}\u{ba}\x07\x67\x02\x02\
		\u{ba}\x44\x03\x02\x02\x02\u{bb}\u{bc}\x07\x68\x02\x02\u{bc}\u{bd}\x07\
		\x70\x02\x02\u{bd}\x46\x03\x02\x02\x02\u{be}\u{bf}\x07\x6b\x02\x02\u{bf}\
		\u{c0}\x07\x35\x02\x02\u{c0}\u{c1}\x07\x34\x02\x02\u{c1}\x48\x03\x02\x02\
		\x02\u{c2}\u{c3}\x07\x68\x02\x02\u{c3}\u{c4}\x07\x35\x02\x02\u{c4}\u{c5}\
		\x07\x34\x02\x02\u{c5}\x4a\x03\x02\x02\x02\u{c6}\u{c7}\x07\x64\x02\x02\
		\u{c7}\u{c8}\x07\x71\x02\x02\u{c8}\u{c9}\x07\x71\x02\x02\u{c9}\u{ca}\x07\
		\x6e\x02\x02\u{ca}\x4c\x03\x02\x02\x02\u{cb}\u{cc}\x07\x78\x02\x02\u{cc}\
		\u{cd}\x07\x71\x02\x02\u{cd}\u{ce}\x07\x6b\x02\x02\u{ce}\u{cf}\x07\x66\
		\x02\x02\u{cf}\x4e\x03\x02\x02\x02\u{d0}\u{d1}\x07\x65\x02\x02\u{d1}\u{d2}\
		\x07\x6a\x02\x02\u{d2}\u{d3}\x07\x63\x02\x02\u{d3}\u{d4}\x07\x74\x02\x02\
		\u{d4}\x50\x03\x02\x02\x02\u{d5}\u{d9}\x09\x03\x02\x02\u{d6}\u{d8}\x09\
		\x04\x02\x02\u{d7}\u{d6}\x03\x02\x02\x02\u{d8}\u{db}\x03\x02\x02\x02\u{d9}\
		\u{d7}\x03\x02\x02\x02\u{d9}\u{da}\x03\x02\x02\x02\u{da}\x52\x03\x02\x02\
		\x02\u{db}\u{d9}\x03\x02\x02\x02\u{dc}\u{de}\x09\x05\x02\x02\u{dd}\u{dc}\
		\x03\x02\x02\x02\u{de}\u{df}\x03\x02\x02\x02\u{df}\u{dd}\x03\x02\x02\x02\
		\u{df}\u{e0}\x03\x02\x02\x02\u{e0}\x54\x03\x02\x02\x02\u{e1}\u{e5}\x07\
		\x24\x02\x02\u{e2}\u{e4}\x0b\x02\x02\x02\u{e3}\u{e2}\x03\x02\x02\x02\u{e4}\
		\u{e7}\x03\x02\x02\x02\u{e5}\u{e6}\x03\x02\x02\x02\u{e5}\u{e3}\x03\x02\
		\x02\x02\u{e6}\u{e8}\x03\x02\x02\x02\u{e7}\u{e5}\x03\x02\x02\x02\u{e8}\
		\u{e9}\x07\x24\x02\x02\u{e9}\x56\x03\x02\x02\x02\x08\x02\u{91}\u{96}\u{d9}\
		\u{df}\u{e5}\x03\x08\x02\x02";
