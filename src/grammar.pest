program = { SOI ~ (function ~ semicolon)* ~ EOI }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

function = { "function" ~ identifier ~ "(" ~ args ~ ")" ~ (":" ~ data_type)? ~ begin ~ block ~ "end" }
    begin = _{ "begin"}
    args = { (identifier ~ ":" ~ data_type)? ~ ("," ~ identifier ~ ":" ~ data_type)* }
    block = { (statement ~ semicolon)* }
        semicolon = _{ ^";" }

statement = { variable_declaration | assignment | print_statement | if_statement | while_loop | for_loop | function_call }
    variable_declaration = { "let" ~ identifier ~ ":" ~ data_type ~ ("=" ~ expression)? }
    assignment = { identifier ~ "=" ~ expression }
    print_statement = { "print" ~ expression }
    if_statement = { "if" ~ expression ~ "then" ~ block ~ ("else" ~ block)? ~ "end" }
    while_loop = { "while" ~ expression ~ "do" ~ block ~ "end" }

    for_loop = { "for" ~ identifier ~ "to" ~ expression ~ ( step? ~ direction?) ~ "iterate" ~ block ~ "end"}
        step = { "by" ~ expression }
        direction = { "direction" ~ (increase | decrease | both) }
            increase = { "increase" }
            decrease = { "decrease" }
            both = { "both" }


    expression = { literal | binary_expression | identifier | unary_expression | function_call }

        binary_expression = { ^"(" ~ expression ~ operator ~ expression ~ ^")"}
            operator = { add | sub | mul | div | mod | eq | neq | lt | lte | gt | gte }
                add = _{ ^"+" }
                sub = _{ ^"-" }
                mul = _{ ^"*" }
                div = _{ ^"/" }
                mod = _{ ^"%" }
                eq = _{ ^"==" }
                neq = _{ ^"!=" }
                lt = _{ ^"<" }
                lte = _{ ^"<=" }
                gt = _{ ^">" }
                gte = _{ ^">=" }
        unary_expression = { unary_operator ~ expression }
            unary_operator = { "-" }
        function_call = { identifier ~ "(" ~ (expression)* ~ ")" }
literal = { number | string | boolean }
number = @{ digit+ }
string = _{ "\"" ~ string_value ~ "\"" }
string_value = { character* }
boolean = { "true" | "false" }
reserved = { "true" | "false" | "int" | "string" | "boolean" | "let" | "print" | "if" | "then" | "else" | "end" | "while" | "do" | "for" | "to" | "increase" | "increase" | "direction" | "decrease" | "both" | "iterate" }

data_type = { "int" | "string" | "boolean" | "char" | "float" | "void" }

identifier = @{ !reserved ~ (letter ~ ( letter | digit )*) }

letter = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
character = _{ letter | digit | " " | "." | "," | "!" | "?" | ";" | ":" }