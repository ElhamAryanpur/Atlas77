program               =  { SOI ~ directive ~ EOI }
WHITESPACE            = _{ " " | "\t" | "\r" | "\n" | "," }
COMMENT               = _{ comment_line }
comment_line          = @{ ";" ~ (!("\r" | "\n") ~ ANY)* }
general_register      =  { "reg" ~ register }
argument_register     =  { "arg" ~ register }
register              = @{ int }

directive             = _{ include_directive* ~ data_directive? ~ text_directive ~ end_directive }
definition            =  { label ~ ":" }
label                 = @{ ASCII_ALPHA ~ ("_" | ASCII_ALPHANUMERIC)* }
func_definition       =  { func_label ~ ":" }
func_label            = @{ "_" ~ label }
include_directive     =  { ".include" ~ "<" ~ file ~ ">" }
file                  =  { (ASCII_ALPHANUMERIC | "_")* ~ ".asr" }
data_directive        =  { ".data" ~ (variable)* }
variable              =  { definition ~ type_directive }
type_directive        =  {
    i32_directive
  | i16_directive
  | i8_directive
  | u32_directive
  | u16_directive
  | u8_directive
  | f32_directive
  | string_directive
  | char_directive
  | array_i32_directive
  | array_u32_directive
  | array_f32_directive
}
i32_directive         =  { ".i32" ~ int }
i16_directive         =  { ".i16" ~ int }
i8_directive          =  { ".i8" ~ int }
u32_directive         =  { ".u32" ~ uint }
u16_directive         =  { ".u16" ~ uint }
u8_directive          =  { ".u8" ~ uint }
f32_directive         =  { ".f32" ~ float }
string_directive      =  { ".string" ~ "\"" ~ string ~ "\"" }
char_directive        =  { ".char" ~ "'" ~ ASCII_ALPHA ~ "'" }
array_i32_directive   =  { ".array_i32" ~ array_size? ~ "{" ~ int* ~ "}" }
array_u32_directive   =  { ".array_u32" ~ array_size? ~ "{" ~ uint* ~ "}" }
array_f32_directive   =  { ".array_f32" ~ array_size? ~ "{" ~ float* ~ "}" }
text_directive        =  { ".text" ~ (global_directive | library_directive) ~ function+ }
end_directive         =  { ".end" }
global_directive      =  { ".global" ~ func_label }
library_directive     =  { ".library" }
function              =  { func_definition ~ (definition | instruction)* }
instruction_directive =  { ".instruction" ~ (argument_register)* ~ general_register }
array_size            = @{ uint }
string                =  { characters* }
characters            = _{ ASCII_ALPHANUMERIC | "!" | ";" | "." | ":" | "(" | ")" | "{" | "}" | "&" | "|" | "'" | "@" | "^" | "*" | "[" | "]" | "$" | "%" | "£" | "/" | "+" | "=" | "-°" | "~" | "?" | "<" | ">" | "°" }
instruction           =  {
    nop_ins
  | add_ins
  | sub_ins
  | mul_ins
  | div_ins
  | or_ins
  | cmp_ins
  | mov_ins
  | inc_ins
  | dec_ins
  | swp_ins
  | lod_ins
  | str_ins
  | psh_ins
  | pop_ins
  | cal_ins
  | ret_ins
  | jmp_ins
  | jmc_ins
  | sys_ins
  | cst_ins
}
nop_ins               =  { "nop" }
add_ins               =  { "add" ~ type ~ general_register ~ general_register ~ general_register }
sub_ins               =  { "sub" ~ type ~ general_register ~ general_register ~ general_register }
mul_ins               =  { "mul" ~ type ~ general_register ~ general_register ~ general_register }
div_ins               =  { "div" ~ type ~ general_register ~ general_register ~ general_register }
and_ins               =  { "and" ~ general_register ~ general_register ~ general_register }
or_ins                =  { "or" ~ general_register ~ general_register ~ general_register }
cmp_ins               =  { "cmp" ~ general_register ~ general_register }
mov_ins               =  { "mov" ~ general_register ~ (int | label) }
inc_ins               =  { "inc" ~ general_register }
dec_ins               =  { "dec" ~ general_register }
swp_ins               =  { "swp" ~ general_register ~ general_register }
lod_ins               =  { "lod" ~ type ~ general_register ~ general_register }
str_ins               =  { "str" ~ type ~ general_register ~ general_register }
psh_ins               =  { "psh" ~ type ~ general_register ~ general_register }
pop_ins               =  { "pop" ~ type ~ general_register }
cal_ins               =  { "cal" ~ func_label }
ret_ins               =  { "ret" }
cst_ins               =  { "cst" ~ type ~ type ~ general_register }
jmp_ins               =  { "jmp" ~ label }
jmc_ins               =  { "jmc" ~ compare_flag ~ label }
sys_ins               =  { "sys" ~ uint }

int   = @{ "-"? ~ ASCII_DIGIT+ }
uint  = @{ ASCII_DIGIT+ }
float = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

compare_flag = { "eq" | "ne" | "lte" | "lt" | "gte" | "gt" }

type      =  {
    i8_type
  | i16_type
  | i32_type
  | u8_type
  | u16_type
  | u32_type
  | f32_type
  | char_type
}
i8_type   = _{ "i8" }
i16_type  = _{ "i16" }
i32_type  = _{ "i32" }
u8_type   = _{ "u8" }
u16_type  = _{ "u16" }
u32_type  = _{ "u32" }
f32_type  = _{ "f32" }
char_type = _{ "char" }
